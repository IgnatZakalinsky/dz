{"version":3,"sources":["pages/Monday.tsx","pages/Tuesday.tsx","main/NavBar.tsx","pages/Wednesday.tsx","pages/Thursday.tsx","pages/Friday.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Monday","useState","title","setTitle","error","setError","onAddTaskClick","newText","alert","type","placeholder","style","borderColor","undefined","value","onChange","e","currentTarget","onKeyPress","key","onClick","Tuesday","NavBar","show","setShow","page","setPage","margin","color","to","Wednesday","Thursday","Friday","App","className","path","exact","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2c60b6dc.chunk.js","sourcesContent":["import React, {useState, ChangeEvent, KeyboardEvent} from 'react';\n\nconst Monday = () => {\n    const [title, setTitle] = useState('');\n    const [error, setError] = useState(false);\n\n    const onAddTaskClick = () => {\n        const newText = title;\n\n        if (newText === '') setError(true);\n        else {\n            setTitle('');\n            alert(newText);\n        }\n    };\n\n    const onTitleChange = (e: ChangeEvent<HTMLInputElement>) => {\n        setError(false);\n        setTitle(e.currentTarget.value);\n    };\n\n    const onKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key === 'Enter') onAddTaskClick();\n    };\n\n    return (\n        <div>\n            Monday\n            <div>\n                <input\n                    type=\"text\"\n                    placeholder=\"New task name\"\n                    style={{borderColor: error ? 'red' : undefined}}\n                    value={title}\n                    onChange={onTitleChange}\n                    onKeyPress={onKeyPress}\n                />\n                <button onClick={onAddTaskClick}>Add</button>\n            </div>\n        </div>\n    );\n};\n\nexport default Monday;\n","import React from 'react';\n\nconst Tuesday = () => {\n    return (\n        <div>\n            Tuesday\n        </div>\n    );\n};\n\nexport default Tuesday;\n","import React, {useState} from 'react';\nimport {NavLink} from \"react-router-dom\";\n\nconst MONDAY = 'monday';\nconst TUESDAY = 'tuesday';\nconst WEDNESDAY = 'wednesday';\nconst THURSDAY = 'thursday';\nconst FRIDAY = 'friday';\n\nconst NavBar = () => {\n    const [show, setShow] = useState(false);\n    const [page, setPage] = useState(MONDAY);\n\n    return (\n        <div>\n            <span style={{margin: 5}}>NavBar</span>\n            <button style={{margin: 5}} onClick={() => setShow(!show)}>{show ? 'hide' : 'show'}</button>\n            {show && <>\n                <NavLink\n                    style={{margin: 5, color: page === MONDAY ? 'red' : 'lime'}}\n                    to={'/monday'}\n                    onClick={() => setPage(MONDAY)}\n                >\n                    monday\n                </NavLink>\n                <NavLink\n                    style={{margin: 5, color: page === TUESDAY ? 'red' : 'lime'}}\n                    to={'/tuesday'}\n                    onClick={() => setPage(TUESDAY)}\n                >\n                    tuesday\n                </NavLink>\n                <NavLink\n                    style={{margin: 5, color: page === WEDNESDAY ? 'red' : 'lime'}}\n                    to={'/wednesday'}\n                    onClick={() => setPage(WEDNESDAY)}\n                >\n                    wednesday\n                </NavLink>\n                <NavLink\n                    style={{margin: 5, color: page === THURSDAY ? 'red' : 'lime'}}\n                    to={'/thursday'}\n                    onClick={() => setPage(THURSDAY)}\n                >\n                    thursday\n                </NavLink>\n                <NavLink\n                    style={{margin: 5, color: page === FRIDAY ? 'red' : 'lime'}}\n                    to={'/friday'}\n                    onClick={() => setPage(FRIDAY)}\n                >\n                    friday\n                </NavLink>\n\n            </>}\n        </div>\n    );\n};\n\nexport default NavBar;\n","import React from 'react';\n\nconst Wednesday = () => {\n    return (\n        <div>\n            Wednesday\n        </div>\n    );\n};\n\nexport default Wednesday;\n","import React from 'react';\n\nconst Thursday = () => {\n    return (\n        <div>\n            Thursday\n        </div>\n    );\n};\n\nexport default Thursday;\n","import React from 'react';\n\nconst Friday = () => {\n    return (\n        <div>\n            Friday\n        </div>\n    );\n};\n\nexport default Friday;\n","import React from 'react';\nimport './App.css';\nimport {HashRouter, Route, Switch} from \"react-router-dom\";\nimport Monday from \"./pages/Monday\";\nimport Tuesday from \"./pages/Tuesday\";\nimport NavBar from \"./main/NavBar\";\nimport Wednesday from \"./pages/Wednesday\";\nimport Thursday from \"./pages/Thursday\";\nimport Friday from \"./pages/Friday\";\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <HashRouter>\n                <NavBar/>\n                <Switch>\n                    <Route path={'/'} exact render={() => <Monday/>}/>\n                    <Route path={'/monday'} render={() => <Monday/>}/>\n                    <Route path={'/tuesday'} render={() => <Tuesday/>}/>\n                    <Route path={'/wednesday'} render={() => <Wednesday/>}/>\n                    <Route path={'/thursday'} render={() => <Thursday/>}/>\n                    <Route path={'/friday'} render={() => <Friday/>}/>\n                    <Route render={() => <div>404 error page</div>}/>\n                </Switch>\n            </HashRouter>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}